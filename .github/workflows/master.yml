# Unique name for this workflow
name: Validate ONLY PR on master branch

# Definition when the workflow should run
on:
    push:
      branches:
      - master
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      types: [opened, synchronize]
      branches: [ master ]
      paths:
        - 'force-app/**'
    workflow_dispatch:

env:
  WAIT: 120 # minutes to wait for deploy command to finish
  CICD_USER: ${{ secrets.MASTER_USERNAME }}
  COMMIT_FROM: ${{ secrets.MASTER_STABLE_COMMIT_HASH }}

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
                  
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            - name: 'Installing sfdx git delta'
              run: | 
                  echo ${{ secrets.MASTER_USERNAME }}
                  echo y | sfdx plugins:install sfdx-git-delta 
                  sfdx plugins 

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: | 
                  sudo apt-get update
                  sudo apt-get install openjdk-8-jdk

            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration/qa org.


            # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.MASTER_URL_PROD }} | sfdx force:auth:sfdxurl:store -a targetOrg --sfdxurlfile=/dev/stdin

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "$COMMIT_FROM" --output changed-sources/ --generate-delta --source force-app/ --ignore-destructive .destructiveignore --ignore .deltaignore
                  cat changed-sources/package/package.xml

            # Now we can use the sfdx scanner to scan the code in the delta directory
            # The output of the scan is stored in a file called apexScanResults.sarif

            # The .sarif file can later be uploaded to github, so that we can see the 
            # results of the scan directly from the PR.

            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                  cd ..

            # Now we upload the .sarif file as explained in the previous step
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: changed-sources/apexScanResults.sarif

           # Scan the delta "/classes" dir for any files that match Test*.cls or *Test.cls and create a comma separated string of selected tests to run
           # If no tests were found, don't run any tests (nightly job will run all tests)
            - name: 'Check-only deploy delta changes'
              run: |
                  SPECIFIED_TESTS=$(find changed-sources/force-app/main/default/classes/* -iname '*test.cls' -or -iname 'test*.cls' -or -iname 'UT_*.cls' -or -iname 'auut*.cls' | sed 's/changed-sources\/force-app\/main\/default\/classes\///' | tr '\n' ',' | sed 's/.$//' | sed 's/.cls//g')
                  if [ -z "$SPECIFIED_TESTS" ]; then TEST_LEVEL="--wait $WAIT"; else TEST_LEVEL="--wait $WAIT --testlevel RunSpecifiedTests --runtests $SPECIFIED_TESTS"; fi
                  NUMBER_OF_COMPONENTS=$(cat changed-sources/package/package.xml | grep -o "<members" | wc -l)
                  echo "Deploying $NUMBER_OF_COMPONENTS components (based on package.xml)"
                  echo "Test level set to : $TEST_LEVEL"
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly -u $CICD_USER --testlevel NoTestRun
